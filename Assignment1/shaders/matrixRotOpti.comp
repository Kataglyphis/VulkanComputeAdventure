#version 450
/* built in:
in uvec3 gl_NumWorkGroups;
in uvec3 gl_WorkGroupID;
in uvec3 gl_LocalInvocationID;
in uvec3 gl_GlobalInvocationID;
in uint  gl_LocalInvocationIndex;
*/

layout( local_size_x_id = 0) in;
layout( local_size_y_id = 1) in;

layout(binding = 0) buffer inputBuf {int v1[];};
layout(binding = 1) buffer outBuf {int v2[];};

// Push constant
layout(push_constant) uniform PushStruct {
    uint w;    // Array size
    uint h;    // Array size
} p;

// fast and efficient local memory; hold integer for each thread
shared int[gl_WorkGroupSize.x*gl_WorkGroupSize.y] shared_ints;

void main() {

    // global IDs
	uint gIDx = gl_GlobalInvocationID.x;
    uint gIDy = gl_GlobalInvocationID.y;
    // work group sizes
    uint lSizeX = gl_WorkGroupSize.x;
    uint lSizeY = gl_WorkGroupSize.y;
    //  local IDs
    uint lIDx = gl_LocalInvocationID.x;
    uint lIDy = gl_LocalInvocationID.y;
    
    if (gIDx >= p.w || gIDy >= p.h) {
        return;
    }

    if(!(gIDx >= p.w || gIDy>= p.h)) {

        // directly write in rotated position into local memory and read horizontally from global!
        // therefore we can LATER read out of local memory horizontally 
        shared_ints[lIDx * lSizeY + (lSizeY - lIDy - 1)] = v1[gIDy * p.w + gIDx];
    }

    barrier();

    uint workgroupglobalIDx = gl_WorkGroupID.x * lSizeX;
    uint workgroupglobalIDy = gl_WorkGroupID.y * lSizeY;

    uint maxGlobalIDy = (gl_NumWorkGroups.y * gl_WorkGroupSize.y - 1); 
    uint flippedLocaly = (lSizeY - 1);

    // when rotated workgroupID is now at the right end of group
    // therefore we need to flip y coordinate
    uint gRotatedIDx = maxGlobalIDy - (workgroupglobalIDy + flippedLocaly);
    uint gRotatedIDy = workgroupglobalIDx;

    // used as index; tells us WHERE we currently are 
    uint index = lIDy * lSizeX + lIDx;

    // in rotated field each row has lSizeY elements 
    // hence division lSizeY gives us Y
    uint lWriteIndexY = index / lSizeY;
    // hence each row has lSizeY elements our new IDx is the modulo 
    uint lWriteIndexX = index % lSizeY;

    //our new ID is now a sum of the rotated global group ID + local rotated id :)
    // we can read horizontally from local memory for we have written into it in rotated coords earlier 
    v2[(gRotatedIDy + lWriteIndexY) * p.h + (gRotatedIDx + lWriteIndexX)] = 
                                                            shared_ints[lIDy * lSizeX + lIDx];

} 
